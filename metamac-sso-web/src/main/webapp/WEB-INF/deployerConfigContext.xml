<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:sec="http://www.springframework.org/schema/security"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd">
       
    <bean id="authenticationManager" class="org.jasig.cas.authentication.AuthenticationManagerImpl">
    
        <property name="credentialsToPrincipalResolvers">
            <list>
                <bean class="org.jasig.cas.authentication.principal.UsernamePasswordCredentialsToPrincipalResolver">
                    <property name="attributeRepository" ref="attributeRepository" />
                </bean>
                
                <bean class="org.jasig.cas.authentication.principal.HttpBasedServiceCredentialsToPrincipalResolver" />
            </list>
        </property>

        <property name="authenticationHandlers">
            <list>
                <!--
                    | This is the authentication handler that authenticates services by means of callback via SSL, thereby validating
                    | a server side SSL certificate.
                    +-->
                <bean class="org.jasig.cas.authentication.handler.support.HttpBasedServiceCredentialsAuthenticationHandler"
                      p:httpClient-ref="httpClient" />
                
                <bean class="org.jasig.cas.adaptors.ldap.BindLdapAuthenticationHandler" 
                      p:filter="${metamac.security.ldap.filter}"
                      p:searchBase="${metamac.security.ldap.searchBase}"
                      p:contextSource-ref="contextSource" />
            </list>
        </property>
        
        <property name="authenticationMetaDataPopulators">
            <list>
                <bean class="org.jasig.cas.authentication.SamlAuthenticationMetaDataPopulator" />
            </list>
        </property>
    </bean>


    <!-- This bean defines the security roles for the Services Management application. Simple deployments can use the in-memory version. More robust deployments 
        will want to use another option, such as the Jdbc version. The name of this should remain "userDetailsService" in order for Spring Security to find it. -->
    <!-- <sec:user name="@@THIS SHOULD BE REPLACED@@" password="notused" authorities="ROLE_ADMIN" /> -->

    <sec:user-service id="userDetailsService">
        <!--  TODO: Change security admin -->
        <sec:user name="ISTAC_ADMIN" password="notused" authorities="ROLE_ADMIN" />
    </sec:user-service>

    <!-- Bean that defines the attributes that a service may return. -->
    <bean id="attributeRepository" class="org.jasig.services.persondir.support.jdbc.MultiRowJdbcPersonAttributeDao">
        <constructor-arg index="0" ref="dataSource" />
        <constructor-arg index="1">
            <value>      
                SELECT usr.username as username, 'ACL' as acl_name,  app.code || '#' || rol.code || '#' || acc.operation_code_id as acl_value
                FROM TB_ACCESS acc
                LEFT JOIN TB_USERS usr ON acc.USER_FK = usr.ID
                LEFT JOIN TB_ROLES rol ON acc.ROLE_FK = rol.ID
                LEFT JOIN TB_APPS app ON acc.APP_FK = app.ID
                WHERE {0}
            </value>
        </constructor-arg>
        <property name="nameValueColumnMappings">
            <map>
                <entry key="acl_name" value="acl_value" />
            </map>
        </property>
        <property name="queryAttributeMapping">
            <map>
                <entry key="username" value="usr.username" />
            </map>
        </property>
        <property name="resultAttributeMapping">
            <map>
                <entry key="username" value="username" />
                <entry key="ACL" value="acl" />
            </map>
        </property>
    </bean>

    <!-- Sample, in-memory data store for the ServiceRegistry. A real implementation would probably want to replace this with the JPA-backed ServiceRegistry 
        DAO The name of this bean should remain "serviceRegistryDao". -->
    <bean id="serviceRegistryDao" class="org.jasig.cas.services.InMemoryServiceRegistryDaoImpl">
        <property name="registeredServices">
            <list>
                <bean class="org.jasig.cas.services.RegisteredServiceImpl">
                    <property name="id" value="0" />
                    <property name="name" value="HTTP" />
                    <property name="description" value="Only Allows HTTP Urls" />
                    <property name="serviceId" value="http://**" />
                    <property name="evaluationOrder" value="10000001" />
                    <property name="allowedAttributes">
                        <list>
                            <value>acl</value>
                        </list>
                    </property>
                </bean>

                <bean class="org.jasig.cas.services.RegisteredServiceImpl">
                    <property name="id" value="1" />
                    <property name="name" value="HTTPS" />
                    <property name="description" value="Only Allows HTTPS Urls" />
                    <property name="serviceId" value="https://**" />
                    <property name="evaluationOrder" value="10000002" />
                    <property name="allowedAttributes">
                        <list>
                            <value>acl</value>
                        </list>
                    </property>
                </bean>

                <bean class="org.jasig.cas.services.RegisteredServiceImpl">
                    <property name="id" value="2" />
                    <property name="name" value="IMAPS" />
                    <property name="description" value="Only Allows HTTPS Urls" />
                    <property name="serviceId" value="imaps://**" />
                    <property name="evaluationOrder" value="10000003" />
                    <property name="allowedAttributes">
                        <list>
                            <value>acl</value>
                        </list>
                    </property>
                </bean>

                <bean class="org.jasig.cas.services.RegisteredServiceImpl">
                    <property name="id" value="3" />
                    <property name="name" value="IMAP" />
                    <property name="description" value="Only Allows IMAP Urls" />
                    <property name="serviceId" value="imap://**" />
                    <property name="evaluationOrder" value="10000004" />
                    <property name="allowedAttributes">
                        <list>
                            <value>acl</value>
                        </list>
                    </property>
                </bean>
            </list>
        </property>
    </bean>


    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName">
            <value>oracle.jdbc.driver.OracleDriver</value>
        </property>
        <property name="url">
            <value>${metamac.security.datasource.url}</value>
        </property>
        <property name="username">
            <value>${metamac.security.datasource.username}</value>
        </property>
        <property name="password">
            <value>${metamac.security.datasource.password}</value>
        </property>
    </bean>

    <bean id="contextSource" class="org.springframework.ldap.core.support.LdapContextSource">
    
        <!-- DO NOT enable JNDI pooling for context sources that perform LDAP bind operations. -->
        <property name="pooled" value="false" />

        <!-- Although multiple URLs may defined, it's strongly recommended to avoid this configuration since the implementation attempts hosts in sequence 
            and requires a connection timeout prior to attempting the next host, which incurs unacceptable latency on node failure. A proper HA setup for LDAP directories 
            should use a single virtual host that maps to multiple real hosts using a hardware load balancer. -->
        <property name="url" value="${metamac.security.ldap.url}" />

        <!-- Manager credentials are only required if your directory does not support anonymous searches. Never provide these credentials for FastBindLdapAuthenticationHandler 
            since the user's credentials are used for the bind operation. -->
        <property name="userDn" value="${metamac.security.ldap.userDn}" />
        <property name="password" value="${metamac.security.ldap.password}" />

        <!-- Place JNDI environment properties here. -->
        <property name="baseEnvironmentProperties">
            <map>
                <!-- Three seconds is an eternity to users. -->
                <entry key="com.sun.jndi.ldap.connect.timeout" value="3000" />
                <entry key="com.sun.jndi.ldap.read.timeout" value="3000" />

                <!-- Explained at http://download.oracle.com/javase/1.3/docs/api/javax/naming/Context.html#SECURITY_AUTHENTICATION -->
                <entry key="java.naming.security.authentication" value="simple" />
            </map>
        </property>
    </bean>

    <bean id="auditTrailManager" class="com.github.inspektr.audit.support.Slf4jLoggingAuditTrailManager" />
</beans>
